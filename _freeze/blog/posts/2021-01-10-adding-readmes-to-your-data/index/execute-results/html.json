{
  "hash": "9ecf991a2e2ac26e797bac6d31d77a3a",
  "result": {
    "markdown": "---\ntitle: \"How to add a Readme to your data files\"\nauthor: David Izydorczyk\nformat:\n  html:\n    code-fold: false\ndate: \"01/04/2021\"\ncategories: [R,Open Science]\ndescription: |\n Because of a recent experience, I was reminded that it is absolutely annoying when researchers   upload their data to an open repository (e.g. OSF or Github) without adding any form of description or wiki. Thus, I decided to a little `R` - function for me and my colleagues to help\n with this.   \nexecute: \n  warning: false\n  message: false\n  out.width: \"100%\"\nimage: open_data.png\n---\n\n\n\n\nBecause of a recent experience, I was reminded that it is absolutely annoying when researchers upload their data to an open repository (e.g. OSF or Github) without adding any form of description or wiki. Thus, I decided to a little `R` - function for me and my colleagues to help with this. You can also source the function directly from Github via `devtools::source_url(\"https://github.com/dizyd/functions/blob/master/make_readme_fun.R?raw=TRUE\")`. \n\nLets start by creating a data.frame containing our very cool and very interesting data. \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ndf = data.frame(\"ID\"   = 1:50,\n                \"cond\" = sample(c(\"A\",\"B\"),50,replace=T),\n                \"rt\"   = rnorm(50,500,40))\n```\n:::\n\nThis data.frame now contains the reaction time data of 50 participant, who can be in one of two conditions:\n\n::: {.cell}\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"ID\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"cond\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"rt\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"A\",\"3\":\"509.5314\"},{\"1\":\"2\",\"2\":\"B\",\"3\":\"469.2099\"},{\"1\":\"3\",\"2\":\"A\",\"3\":\"506.2472\"},{\"1\":\"4\",\"2\":\"B\",\"3\":\"447.0456\"},{\"1\":\"5\",\"2\":\"B\",\"3\":\"420.6317\"},{\"1\":\"6\",\"2\":\"B\",\"3\":\"521.5260\"},{\"1\":\"7\",\"2\":\"B\",\"3\":\"432.3330\"},{\"1\":\"8\",\"2\":\"A\",\"3\":\"470.2699\"},{\"1\":\"9\",\"2\":\"B\",\"3\":\"452.3070\"},{\"1\":\"10\",\"2\":\"B\",\"3\":\"489.3889\"},{\"1\":\"11\",\"2\":\"A\",\"3\":\"520.9092\"},{\"1\":\"12\",\"2\":\"B\",\"3\":\"522.3799\"},{\"1\":\"13\",\"2\":\"B\",\"3\":\"482.3478\"},{\"1\":\"14\",\"2\":\"B\",\"3\":\"494.0820\"},{\"1\":\"15\",\"2\":\"A\",\"3\":\"483.5051\"},{\"1\":\"16\",\"2\":\"A\",\"3\":\"499.2507\"},{\"1\":\"17\",\"2\":\"A\",\"3\":\"526.2942\"},{\"1\":\"18\",\"2\":\"A\",\"3\":\"582.8598\"},{\"1\":\"19\",\"2\":\"B\",\"3\":\"461.4668\"},{\"1\":\"20\",\"2\":\"B\",\"3\":\"518.8481\"},{\"1\":\"21\",\"2\":\"B\",\"3\":\"495.7323\"},{\"1\":\"22\",\"2\":\"B\",\"3\":\"467.5457\"},{\"1\":\"23\",\"2\":\"A\",\"3\":\"495.3841\"},{\"1\":\"24\",\"2\":\"A\",\"3\":\"576.2476\"},{\"1\":\"25\",\"2\":\"B\",\"3\":\"605.6463\"},{\"1\":\"26\",\"2\":\"A\",\"3\":\"459.5936\"},{\"1\":\"27\",\"2\":\"A\",\"3\":\"556.1094\"},{\"1\":\"28\",\"2\":\"B\",\"3\":\"492.2886\"},{\"1\":\"29\",\"2\":\"A\",\"3\":\"433.9755\"},{\"1\":\"30\",\"2\":\"A\",\"3\":\"485.6322\"},{\"1\":\"31\",\"2\":\"A\",\"3\":\"530.4206\"},{\"1\":\"32\",\"2\":\"B\",\"3\":\"514.7140\"},{\"1\":\"33\",\"2\":\"B\",\"3\":\"596.5956\"},{\"1\":\"34\",\"2\":\"B\",\"3\":\"460.3864\"},{\"1\":\"35\",\"2\":\"A\",\"3\":\"549.4527\"},{\"1\":\"36\",\"2\":\"A\",\"3\":\"449.0852\"},{\"1\":\"37\",\"2\":\"A\",\"3\":\"583.6742\"},{\"1\":\"38\",\"2\":\"B\",\"3\":\"517.6325\"},{\"1\":\"39\",\"2\":\"A\",\"3\":\"451.2107\"},{\"1\":\"40\",\"2\":\"A\",\"3\":\"507.9436\"},{\"1\":\"41\",\"2\":\"A\",\"3\":\"562.3078\"},{\"1\":\"42\",\"2\":\"B\",\"3\":\"519.7041\"},{\"1\":\"43\",\"2\":\"B\",\"3\":\"505.2278\"},{\"1\":\"44\",\"2\":\"A\",\"3\":\"456.7439\"},{\"1\":\"45\",\"2\":\"A\",\"3\":\"508.2164\"},{\"1\":\"46\",\"2\":\"B\",\"3\":\"497.5037\"},{\"1\":\"47\",\"2\":\"A\",\"3\":\"496.2717\"},{\"1\":\"48\",\"2\":\"B\",\"3\":\"584.5190\"},{\"1\":\"49\",\"2\":\"A\",\"3\":\"513.0205\"},{\"1\":\"50\",\"2\":\"B\",\"3\":\"549.8794\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nThe next thing we need is a vector of the same length as the number of variables we have in our data.frame, which contains the description of the corresponding variables. For instance, in our example this might look like this:\n\n::: {.cell}\n\n```{.r .cell-code}\ndesc = c(\"unique numeric participant ID [1-50]\",   # description for variable ID\n         \"condition [A:congruent, B:incongruent]\", # description for variable condition\n         \"average reaction time in ms\")            # description for the variable rt\n```\n:::\n\n\nNext, we need our function. I will first show you the complete function-code and then go through it step by step. So this is what our final function will look like:\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_df_readme     <- function(df,desc,info = NULL,file = \"readme.txt\",add_examples=TRUE,digits=2){  \n  \n  \n  temp0 <- data.frame(\"Variable\"    = names(df),\n                      \"Type\"        = sapply(df, class),\n                      \"Description\" = desc)\n  \n  row.names(temp0) <- NULL\n  \n  if(add_examples){\n    \n    temp_info <- df[sample(1:nrow(df),2),] %>%\n                    mutate_if(is.numeric,round,digits) %>% \n                    t() %>%\n                    as.data.frame() %>%\n                    apply(., 1, paste, collapse=\", \") %>% \n                    unlist()\n    \n    names(temp_info) <- NULL\n    temp0 <- temp0 %>% add_column(\"Example\" = temp_info,.before = \"Description\")\n  }\n  \n  # Start writing to the file\n  sink(file)\n  if(length(info)){\n    cat(info,\"\\n\",\"\\n\",\"data.frame (\",nrow(df),\",\",ncol(df),\")\",\"\\n\",\"\\n\",sep = \"\")\n  }\n  \n  temp1 <- temp0 %>% knitr::kable(format = \"markdown\") \n  paste0(temp1,\"\\n\") %>% cat(sep = \"\")\n  \n  # Stop writing to the file\n  sink()\n  \n}\n```\n:::\n\nIn the first part of the function, we start by creating an inital data.frame `temp0` containing the names of our variables, the corresponding description and the variable type. \n\n::: {.cell}\n\n```{.r .cell-code}\n  temp0 <- data.frame(\"Variable\"    = names(df),\n                      \"Type\"        = sapply(df, class),\n                      \"Description\" = desc)\n  \n  row.names(temp0) <- NULL\n```\n:::\n\nThis initial data.frame looks like this:\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Variable\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Type\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Description\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"ID\",\"2\":\"integer\",\"3\":\"unique numeric participant ID [1-50]\"},{\"1\":\"cond\",\"2\":\"character\",\"3\":\"condition [A:congruent, B:incongruent]\"},{\"1\":\"rt\",\"2\":\"numeric\",\"3\":\"average reaction time in ms\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nThe next step is to add two example entries of each variable to this `temp0` data.frame *if* the argument `add_examples` equals `TRUE`. The lines do this by: \n\n- sampling two entries from the initial data.frame (`sample()`)\n- rounding numeric variables to `digits` decimal places (`mutate_if`)\n- transposing it (`t()`)\n- pasting the two entries together (`apply()`) \n- and returning everything as vector (`unlist()`).  \n\nAfterwards, I add this new vector `temp_info` to the data.frame as a new column called `Description`\n\n::: {.cell}\n\n```{.r .cell-code}\n    temp_info <- df[sample(1:nrow(df),2),] %>%\n                  mutate_if(is.numeric,round,2) %>% \n                  t() %>%\n                  apply(., 1, paste, collapse=\", \") %>% \n                  unlist()\n    \n    names(temp_info) <- NULL\n    temp0 <- temp0 %>% add_column(\"Example\" = temp_info,.before = \"Description\")\n```\n:::\n\nSo now we have:\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Variable\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Type\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Example\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Description\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"ID\",\"2\":\"integer\",\"3\":\"45,  2\",\"4\":\"unique numeric participant ID [1-50]\"},{\"1\":\"cond\",\"2\":\"character\",\"3\":\"A, B\",\"4\":\"condition [A:congruent, B:incongruent]\"},{\"1\":\"rt\",\"2\":\"numeric\",\"3\":\"508.22, 469.21\",\"4\":\"average reaction time in ms\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nThe next lines of code will add an info text, provided trough the `info = ` argument, as well as information about the dimensions of the data.frame to the top of the final `readme.txt`. The statement `length(info)` will return `FALSE` if the argument is left empty (or `= NULL`) and thus no information will be added if none is provided. \n\n::: {.cell}\n\n:::\n\nThe last part of the function prints out the data.frame `temp0` in the format of a `markdown` table by using the `kable()` function. I used the `markdown` format since it looks nice in a plain `.txt` file and when copy & pasted in a Github Readme.md or to the OSF wiki part. Everything between the  `sink()` statements is saved as `readme.txt` in the working directory (you can change the name or the path by changing it using the `file = ` argument). Now lets put everything together. Running the following command (of coruse, after first running the function code above) \n\n::: {.cell}\n\n```{.r .cell-code}\ndf = data.frame(\"ID\"   = 1:50,\n                \"cond\" = sample(c(\"A\",\"B\"),50,replace=T),\n                \"rt\"   = rnorm(50,500,40))\n\ndesc = c(\"unique numeric participant ID [1-50]\",   # description for variable ID\n         \"condition [A:congruent, B:incongruent]\", # description for variable condition\n         \"average reaction time in ms\")  \n\nmake_df_readme(df,\n              desc,\n              info = \"This is data for the second experiment reported in Fancy (2021) and ...\")\n```\n:::\n\nproduces the `readme.txt` file, which looks like this:\n\n::: {.cell}\n\n```{.r .cell-code}\nThis is data for the second experiment reported in Fancy (2021) and ...\n\ndata.frame (50,3)\n\n|Variable |Type      |Example             |Description                            |\n|:--------|:---------|:-------------------|:--------------------------------------|\n|ID       |integer   |12,15               |unique numeric participant ID [1-50]   |\n|cond     |character |A, B                |condition [A:congruent, B:incongruent] |\n|rt       |numeric   |511.44,486.54       |average reaction time in ms            |\n```\n:::\n\nIf you copy & paste the table in your OSF wiki or Github Readme the table will look even better: \n\n|Variable |Type      |Example             |Description                            |\n|:--------|:---------|:-------------------|:--------------------------------------|\n|ID       |integer   |12,15               |unique numeric participant ID [1-50]   |\n|cond     |character |A, B                |condition [A:congruent, B:incongruent] |\n|rt       |numeric   |511.44,486.54       |average reaction time in ms            |",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"..\\..\\..\\site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"..\\..\\..\\site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}