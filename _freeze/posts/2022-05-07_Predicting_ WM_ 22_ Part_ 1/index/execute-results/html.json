{
  "hash": "90b5d7a1f15f2305d6705c136a71f8d6",
  "result": {
    "markdown": "---\ntitle: \"Predicting the WM22 Part 1\"\nformat:\n  html:\n    code-fold: true\ndate: \"2022-05-07\"\ncategories: [football,STAN]\nexecute: \n  warning: false\n  message: false\n  out.width: \"100%\"\n---\n\nWith this series of blog posts, I wanted to learn more about `Python`, plotting maps with `ggplot`, modeling with `STAN`, football (?) and just practice writing. The aim is to predict the games of the 2022 football world championship using data from the qualifying games of all countries and informations about the individual players of each team. I scraped the data from open websites using `Python`. The scripts can be found on the corresponding `Github` page of this project. In this first blog post of the series, I want to explore the data set `results_quali_matches.csv` which contains the data of all qualifying games. I never used spatial data or plotted spatial data, so since I have data from all over the world, I want to try out plotting maps with `ggplot`. The main point of this blog post, however, is to get a feel for the data we have, which will be useful for our modeling attempts later. \n\n# Exploring the goals around the world.\n\nI start by loading the packages I need, set a general theme for our plots, and then load our data. \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(maps)\nlibrary(mapdata)\nlibrary(viridis)\nlibrary(patchwork)\nlibrary(countrycode)\nlibrary(ggthemes)\nlibrary(ggrepel)\nlibrary(plotly)\n\ntheme_set(\n  theme_bw() +\n    theme(plot.title = element_text(hjust = 0.5)) \n)\n\n\nquali22        <- read_csv2(\"../../data/results_quali_matches.csv\")\nquali22$goalsA <- as.numeric(quali22$goalsA)\n```\n:::\n\nIn total we have 796 matches in our data set. Lets also check how many different countries we have:\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries <-  quali22$teamA %>% unique() \nlength(countries)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 183\n```\n:::\n:::\n\n# Exploring the goals around the world.\n\nLets start by calculating and plotting the number of goals scored and received by each country. Our data.frame generally looks like this:\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(quali22)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 5\n  teamA        teamB        goalsA goalsB region\n  <chr>        <chr>         <dbl>  <dbl> <chr> \n1 Niger        Burkina Faso      0      2 Africa\n2 Algerien     Djibouti          8      0 Africa\n3 Djibouti     Niger             2      4 Africa\n4 Burkina Faso Algerien          1      1 Africa\n5 Algerien     Niger             6      1 Africa\n6 Djibouti     Burkina Faso      0      4 Africa\n```\n:::\n:::\n\nI first want to create two new variables `scored` and `received` using a `for`-loop. There might be a \"tidyverse\" way to do this faster, however, I think the `for`-loop is pretty straight forward.\n\n::: {.cell}\n\n```{.r .cell-code}\nn_countries <- length(countries)\nscored      <- vector(\"numeric\",n_countries)\nreceived    <- vector(\"numeric\",n_countries)\n\nfor(i in 1:length(countries)){\n\n  country <- countries[i]\n  rows    <- quali22 %>% filter(teamA == country | teamB == country) \n\n  temp    <- rows %>% mutate(scored  = case_when(\n                                        teamA == country ~ goalsA,\n                                        teamB == country ~ goalsB),\n                            received = case_when(\n                                        teamA == country ~ goalsB,\n                                        teamB == country ~ goalsA)) %>%\n                      summarize(scored   = sum(scored,na.rm=TRUE),\n                                received = sum(received,na.rm=TRUE))\n\n  scored[i]   <- temp$scored\n  received[i] <- temp$received\n}\n```\n:::\n\nLets combine all variables to a new data.frame:\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_stats <- tibble(\"country\" = countries,scored,received) %>%\n                    arrange(desc(scored))\ncountry_stats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 183 x 3\n   country     scored received\n   <chr>        <dbl>    <dbl>\n 1 Japan           58        6\n 2 Kanada          50        8\n 3 Iran            49        8\n 4 Australien      43       11\n 5 Brasilien       40        5\n 6 China           39       22\n 7 England         39        3\n 8 Panama          36       20\n 9 Deutschland     36        4\n10 Südkorea        35        4\n# ... with 173 more rows\n```\n:::\n:::\n\n\n## Making world maps using the ggplot2\n\nNow I want to make a  world map and then color each country by the number of goals scored/received. For this I will use the `map` package, which provides a data.frame that  contains outlines of several continents.\n\n::: {.cell}\n\n```{.r .cell-code}\nworld <- map_data(\"world\")\n\nhead(world)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       long      lat group order region subregion\n1 -69.89912 12.45200     1     1  Aruba      <NA>\n2 -69.89571 12.42300     1     2  Aruba      <NA>\n3 -69.94219 12.43853     1     3  Aruba      <NA>\n4 -70.00415 12.50049     1     4  Aruba      <NA>\n5 -70.06612 12.54697     1     5  Aruba      <NA>\n6 -70.05088 12.59707     1     6  Aruba      <NA>\n```\n:::\n:::\n\nThis  `world` data.frame has the following variables: `long` for longitude, `lat` for latitude, `group` tells which adjacent points to connect, `order` refers to the sequence by which the points should be connected, and `region` and `subregion` annotate the area surrounded by a set of points. We can use this information to plot the world using `ggplot`: \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = world, aes(x=long, y = lat, group = group)) +\n  geom_polygon(color=\"black\",fill=\"lightgrey\")  +\n  coord_fixed(1.3) + theme_map() # looks better\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\nBeautiful, isn't it ? In order to color each country by the number of goals scored or received, we have to join the `world` and the `country_stats` data.frames together. However, before we can do this, we first have to make some processing steps in both data.frames. First, I need to translate the country names in the `country_stats` data.frames from German to English, since the `region` column in `world` contains the Names in English. Second, in the `country_stats` data.frame I have some \"countries\" which are rather sub-regions in `world`, for instance, Wales or Scotland. Thus, I need to create a new column in `world` which contains the same \"countries\" as in `country_stats`. \n \nTo translate the names, I use the `countrycode` package. \n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_stats <- country_stats %>%\n                    mutate(country_en = countrycode(country, origin      = 'country.name.de',\n                                                             destination = 'country.name.en'))\ncountry_stats %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 4\n  country    scored received country_en\n  <chr>       <dbl>    <dbl> <chr>     \n1 Japan          58        6 Japan     \n2 Kanada         50        8 Canada    \n3 Iran           49        8 Iran      \n4 Australien     43       11 Australia \n5 Brasilien      40        5 Brazil    \n6 China          39       22 China     \n```\n:::\n:::\n\nThis worked quite well, except for the following warning: `Some values were not matched unambiguously: Br. Jungferninseln, Djibouti, Dom. Republik, England,` `Kapverdische Inseln, Schottland, Sénégal, VA Emirate, Wales, Zentralafr. Republik`. So I still have to put in some work by myself. I also added additional country name changes, based on checks a few code chunks further down.\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_stats <- country_stats %>%\n                    mutate(country_en = case_when(\n                      country == \"Djibouti\" ~ \"Djibouti\", # not sure why this didnt work before\n                      country == \"Br. Jungferninseln\" ~ \"Virgin Islands\",\n                      country == \"Dom. Republik\" ~ \"Dominican Republic\",\n                      country == \"England\" ~ \"Great Britain\",\n                      country == \"Kapverdische Inseln\" ~ \"Cape Verde\",\n                      country == \"Schottland\" ~ \"Scotland\",\n                      country == \"Sénégal\" ~ \"Senegal\",\n                      country == \"Wales\" ~ \"Wales\",\n                      country == \"Zentralafr. Republik\" ~ \"Central African Republic\",\n                      country == \"Bosnien-Herzegowina\" ~ \"Bosnia and Herzegovina\",\n                      country == \"Elfenbeinküste\" ~ \"Ivory Coast\",\n                      country == \"Tschechien\" ~ \"Czech Republic\",\n                      country == \"Curaçao\" ~ \"Curacao\",\n                      country == \"Kongo\" ~ \"Republic of Congo\",\n                      country == \"USA\" ~ \"USA\",\n                      country == \"DR Kongo\" ~ \"Democratic Republic of the Congo\",\n                      country == \"St. Kitts & Nevis\" ~ \"Nevis\",\n                      country == \"Antigua & Barbuda\" ~ \"Antigua\",\n                      country == \"Turks & Caicos\" ~ \"Turks and Caicos Islands\",\n                      country == \"Trinidad & Tobago\" ~ \"Trinidad\",\n                      country == \"St. Vincent/Grenadines\" ~ \"Saint Vincent\",\n                      country == \"VA Emirate\" ~ \"United Arab Emirates\",\n                      country == \"Hong Kong SAR China\" ~ \"Hongkong\",\n                      country == \"Palästina\" ~ \"Palestine\",\n                      country == \"Myanmar\" ~ \"Myanmar\",\n                      country == \"Nordirland\" ~ \"Northern Ireland\",\n                      TRUE ~ country_en\n                    )) \n \n\n\n# check if we have everything:\n# country_stats %>% filter(is.na(country_en))\ncountry_stats %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 4\n  country    scored received country_en\n  <chr>       <dbl>    <dbl> <chr>     \n1 Japan          58        6 Japan     \n2 Kanada         50        8 Canada    \n3 Iran           49        8 Iran      \n4 Australien     43       11 Australia \n5 Brasilien      40        5 Brazil    \n6 China          39       22 China     \n```\n:::\n:::\n\nNext I make a new variable in the `worlds` data.frame, which I will then use to join both data.frames together.\n\n::: {.cell}\n\n```{.r .cell-code}\nworld <- world %>%\n            mutate(country_en = case_when(subregion == \"Wales\" ~ \"Wales\",\n                                          subregion == \"Northern Ireland\" ~ \"Northern Ireland\",\n                                          subregion == \"Scotland\" ~ \"Scotland\",\n                                          subregion == \"Great Britain\" ~ \"Great Britain\",\n                                          subregion == \"Grand Caicos Island\" ~ \"Turks and Caicos Islands\",\n                                          subregion == \"British\" ~ \"Virgin Islands\",\n                                          subregion == \"Hong Kong\" ~ \"Hong Kong\",\n                                          TRUE ~ region)) %>% \n            filter(region != \"USA\" | region == \"USA\" & (is.na(subregion) | subregion == \"Alaska\"),\n                   region != \"United Arab Emirates\" | region == \"United Arab Emirates\" & is.na(subregion),\n                   region != \"Myanmar\" | region == \"Myanmar\" & is.na(subregion),\n                   region != \"Ireland\" | region == \"Ireland\" & is.na(subregion))\n  \n# We need to add Gibraltar through a different dataset\n# \"worldHires\" is a more detailed version of \"world\"\ntemp <- map_data('worldHires')  %>% filter(subregion == \"Gibralter\") %>% mutate(country_en = \"Gibraltar\")\n  \n\nworld <- bind_rows(world,temp) %>% as_tibble() \n```\n:::\n\nNow we can join both data.frames using `left_join`. Lets also clean the resulting data.frame a little bit.\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_stats <- left_join(country_stats,world,by=\"country_en\") %>% \n                      select(region = country_en, scored, received, long, lat, group, order )\n\n# checks:\n# check if any countries do not have infos from world\n# country_stats %>% filter(is.na(long)) %>% pull(region) %>% unique()\n```\n:::\n\nGreat, after some back and forth changes, I think I now have the position of every country in our data set. Lets check this, by just plotting all countries or regions where we have some data from.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = country_stats, aes(x=long, y = lat, group = group)) +\n  geom_polygon(color=\"black\",fill=\"lightgrey\") +\n  coord_fixed(1.3) + theme_map()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\nSo we this really is a \"World\" championship. \n\n## Color regions by goals scored and recevied\n\nHere I color each country or region by the number of goals they scored and received in their qualifying matches. From the plots you can identify some countries which apparently did well in their group, since the score many goals, but received only few. For instance, Canada, Japan, German, or Brasil. There also seem to be fewer goals in African and south-east Asian countries.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = country_stats, aes(x=long, y = lat, group = group)) +\n  geom_polygon(aes(fill=scored), color=\"black\",size = 0.5) + \n  scale_fill_viridis() +\n  coord_fixed(1.3) +\n  labs(title = \"Goals Scored\") + theme_map() +\n  theme(plot.title = element_text(hjust = 0.5)) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=1152}\n:::\n\n```{.r .cell-code}\nggplot(data = country_stats, aes(x=long, y = lat, group = group)) +\n  geom_polygon(aes(fill=received), color=\"black\",size = 0.5) + \n  scale_fill_viridis() +\n  coord_fixed(1.3) +\n  labs(title = \"Goals Received\") + theme_map() +\n  theme(plot.title = element_text(hjust = 0.5)) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-2.png){width=1152}\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# p1 <- ggplot(data = country_stats, aes(x=long, y = lat, group = group)) +\n#   geom_polygon(aes(fill=scored), color=\"black\",size = 0.5) +\n#   scale_fill_viridis() +\n#   labs(title = \"Goals Scored\") + theme_map() +\n#   theme(plot.title = element_text(hjust = 0.5))\n# \n# p2 <- ggplot(data = country_stats, aes(x=long, y = lat, group = group)) +\n#   geom_polygon(aes(fill=received), color=\"black\",size = 0.5) +\n#   scale_fill_viridis() +\n#   labs(title = \"Goals Received\") + theme_map() +\n#   theme(plot.title = element_text(hjust = 0.5))\n# \n# \n# p1 / p2\n# \n# \n# ggsave(\"goals_WM22_qualifying.svg\",width=30,height=30,unit=\"cm\")\n```\n:::\n\n\n\n## Goals Scored and Received per Country\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp <- country_stats %>% select(region,scored,received) %>% distinct()\n```\n:::\n\n\nI also want to get a general idea of the distribution and relationship of the scored and received goals. There is only a small negative correlation between the number of goals scored and the number of goals received (r = -0.16), mostly driven by Japan.\n\n::: {.cell}\n\n```{.r .cell-code}\np_scatter <- ggplot(temp,aes(x = scored, y = received)) +\n              geom_point(shape = 21, fill = \"lightgrey\",size = 2) +\n              geom_smooth(method = \"lm\") +\n              geom_label_repel(aes(label = region),\n                               box.padding   = 0.35, \n                               point.padding = 0.5,\n                               segment.color = 'grey50')\n\np_scatter\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nOn average, countries scored/received 12.43 goals (SD = 10.53). Lets also look at the distributions:\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temp) + \n  geom_density(aes(x = scored, fill = \"Scored\"), alpha = 0.5) +\n  geom_density(aes(x = received, fill = \"Received\"), alpha = 0.5) +\n  scale_fill_manual(values = c(\"#74D055FF\",\"#39558CFF\")) + \n  labs(fill = \"Goals\",x = \"\", y=\"\", title = \"Distribution of Goals per Country\") +\n  theme(legend.position = c(0.8, 0.8)) +\n    scale_x_continuous(expand = c(0, 0), limits = c(0, 65)) + \n    scale_y_continuous(expand = c(0, 0), limits = c(0, 0.065))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n## Goals Scored and Received per match\n\nI am also interested in the single match-ups, for instance, how many goals are there in the average match, what are the most probably outcomes of a match, etc. Lets try to find this out. On average, there were  1.43 goals per game (SD = 1.72). The distribution of goals looks as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(goals = c(quali22$goalsA,quali22$goalsB)) %>%\n  count(goals,sort=T) %>%\n  na.omit() %>% \n  ggplot(aes(x = goals,y = n)) + \n    geom_col(fill=\"#39558CFF\") +\n    geom_text(aes(label = n), vjust = -0.3) +\n    ylim(0,560) +\n    labs(x = \"Nr. of Goals of one team\", y=\"Frequency\", title = \"Distribution of Goals per Match\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\nThe most common number of goals a team scores is 0 (sad). Now lets look at the results of the matches. I don't really care if the match was 1:0 or 0:1, so I will treat both outcomes as the same. I will first recode the individual goals of team A and B into a match results variable `result`, which I can then use to count and plot the different results.\n\n::: {.cell}\n\n```{.r .cell-code}\nquali22 %>%\n  na.omit() %>%\n  arrange(goalsA,goalsB) %>% \n  mutate(result = paste0(ifelse(goalsA > goalsB,goalsA,goalsB),\n                         \":\",\n                         ifelse(goalsA > goalsB,goalsB,goalsA))) %>%\n  count(result,sort=T) %>% \n  ggplot(aes(x = reorder(result,n),y = n)) +\n    geom_col(fill=\"#39558CFF\") +\n    geom_text(aes(label = n), hjust = -0.12) +\n    coord_flip() +\n    scale_y_continuous(expand = c(0, 0), limits = c(0, 170)) +\n    labs(x = \"Match Result\", y = \"Frequency\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\nNot suprising, results of 1:0, 2:0, or 1:1 are the most common outcomes. Just out of curioisity, lets check the high scoring games:\n\n::: {.cell}\n\n```{.r .cell-code}\nquali22 %>% filter(goalsA >= 10 | goalsB >= 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 x 5\n  teamA          teamB                  goalsA goalsB region  \n  <chr>          <chr>                   <dbl>  <dbl> <chr>   \n1 Iran           Kambodscha                 14      0 Asia    \n2 Kambodscha     Iran                        0     10 Asia    \n3 Japan          Mongolei                   14      0 Asia    \n4 Japan          Myanmar                    10      0 Asia    \n5 Kaimaninseln   Kanada                      0     11 CONCACAF\n6 Guatemala      St. Vincent/Grenadines     10      0 CONCACAF\n7 Anguilla       Panama                      0     13 CONCACAF\n8 Turks & Caicos Haiti                       0     10 CONCACAF\n9 San Marino     England                     0     10 Europe  \n```\n:::\n:::\nThose were some very one-sided match-ups. ",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}